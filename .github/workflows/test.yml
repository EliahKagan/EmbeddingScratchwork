name: Test

on: [push, pull_request]

jobs:
  check-for-api-key:
    name: Check for OpenAI API key
    runs-on: ubuntu-latest
    steps:
      - name: Check OPENAI_API_KEY repository secret
        run: grep -q '^sk-' <<<'${{ secrets.OPENAI_API_KEY }}'

  read-blocking-config:
    name: Read blocking configuration
    runs-on: ubuntu-latest
    outputs:
      use-mutex: ${{ steps.read-blocking-config-variable.outputs.use-mutex }}
    steps:
      - name: Read TESTS_CI_NONBLOCKING variable
        id: read-blocking-config-variable
        run: |
          # Allowed values are "false", "true", "no", "yes", "0", "1", and "".
          readonly -a no_var_warning=(
              'No GitHub Actions configuration variable TESTS_CI_NONBLOCKING.'
              'Treating it as if set to false.'
              'To make your intentions clear, set the configuration variable.'
              'https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository'
          )
          if grep -qx '' <<<"$TESTS_CI_NONBLOCKING"; then
              # Nonblocking mode is implicitly off, so we WILL use the mutex.
              printf '%s\n' "${no_var_warning[@]}" >&2  # Warn in step output.
              echo "::warning ::${no_var_warning[*]}"  # Annotate workflow.
              echo "use-mutex=true" >>"$GITHUB_OUTPUT"
          elif grep -Eqxi 'false|no|0|' <<<"$TESTS_CI_NONBLOCKING"; then
              # Nonblocking mode is explicitly off, so we WILL use the mutex.
              echo "use-mutex=true" >>"$GITHUB_OUTPUT"
          elif grep -Eqxi 'true|yes|1' <<<"$TESTS_CI_NONBLOCKING"; then
              # Nonblocking mode is on, so we will NOT use the mutex.
              echo "use-mutex=false" >>"$GITHUB_OUTPUT"
          else
              printf 'Unrecognized value "%s"\n' "$TESTS_CI_NONBLOCKING" >&2
              exit 1
          fi
        env:
          TESTS_CI_NONBLOCKING: ${{ vars.TESTS_CI_NONBLOCKING }}

  test:
    name: Unit Tests

    needs: [check-for-api-key, read-blocking-config]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.10', '3.9', '3.8', '3.7']

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Substitute Python version
        run: |
          perl -i -spwe 's/^ *- python=\K.+$/$pyver/' -- \
              -pyver=${{ matrix.python-version }} environment.yml

      - name: Install Conda environment from environment.yml
        uses: mamba-org/provision-with-micromamba@v15

      - name: Print Python version
        run: python -V

      - name: Set up mutex
        if: needs.read-blocking-config.outputs.use-mutex != 'false'
        uses: EliahKagan/actions-mutex@v2

      - name: Run Unit Tests
        run: python -m unittest -v
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TESTS_CACHE_EMBEDDING_CALLS: 'yes'
          TESTS_LOGGING_LEVEL: 'INFO'
